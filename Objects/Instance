In object-oriented programming, an instance of a class refers to a specific object that is created based on the blueprint provided by the class. 
When you create an instance of a class, you are essentially creating a unique object with its own set of properties and behavior.

Here's an example to illustrate the concept of instances:

```javascript
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }

  sayHello() {
    console.log(`Hello, my name is ${this.name} and I'm ${this.age} years old.`);
  }
}

const john = new Person("John", 30);
const sarah = new Person("Sarah", 25);

john.sayHello(); // Output: "Hello, my name is John and I'm 30 years old."
sarah.sayHello(); // Output: "Hello, my name is Sarah and I'm 25 years old."
```

In the above example, the `Person` class is defined with a constructor method and a `sayHello` method. The `john` and `sarah` variables are instances of the `Person` class, created using the `new` keyword and providing the necessary constructor arguments.

Each instance, `john` and `sarah`, has its own set of properties (`name` and `age`) and can invoke the `sayHello` method. The instances are independent of each other and can have different property values, allowing you to create multiple objects with distinct characteristics based on the class blueprint.

Instances of a class provide a way to create and work with individual objects that share the same structure and behavior defined by the class. You can interact with each instance separately, access its properties, and invoke its methods to perform specific actions based on the defined behavior.